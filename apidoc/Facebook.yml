---
name: Modules.Facebook
summary: |
    Add-on Facebook module.
description: |
    The Facebook module is used for connecting your application with Facebook. 
    This module supports the following features:

    * Logging in to Facebook and authorizing your application with either the
      [Login button](Modules.Facebook.LoginButton) or programatically.

    * Making requests through the Facebook Graph API using the
      [requestWithGraphPath()](Modules.Facebook.requestWithGraphPath) method.

    ## Getting Started

    To use the Facebook module, you need a Facebook application. To create a Facebook App,
    go to the Facebook Developer App: [developers.facebook.com/apps](https://developers.facebook.com/apps).

    - Edit the `modules` section of your tiapp.xml file to include this module:

        ``` xml
        <modules>
            <!-- Add the appropriate line(s) to your modules section -->
            <module platform="android">facebook</module>
            <module platform="iphone">facebook</module>
        </modules>
        ```

    - Instantiate the module with the `require('facebook')` method, then make subsequent API calls
      with the new Facebook object.

        ``` javascript
        var fb = require('facebook');
        fb.permissions = [FACEBOOK_APP_PERMISSIONS]; // e.g. ['email']
        fb.initialize();
        fb.authorize();
        ```

    ### Additional iOS Setup Steps

    For the iOS platform, in the `ios plist dict` section of your `tiapp.xml` file, add the following keys:

      * `FacebookAppID` key with your Facebook App ID as the string value
      * `FacebookDisplayName` key with your Facebook App name (the one from `developer.facebook.com`) as the string value
      * `CFBundleURLTypes` key with a single-element array containing a dict as the value, where the dict contains:
          * `CFBundleURLName` key with the application app ID (same value as the `id` in the `tiapp.xml` file) as the string value
          * `CFBundleURLSchemes` key with a single-element array containing the Facebook App ID prefixed with `fb` as a string value

    For example:

    ``` xml
    <ti:app>
        <ios>
            <plist>
                <dict>
                    <key>CFBundleURLTypes</key>
                    <array>
                        <dict>
                            <key>CFBundleURLName</key>
                            <!-- Application ID same as the id value in the tiapp.xml file -->
                            <string>APP_ID</string>
                            <key>CFBundleURLSchemes</key>
                            <array>
                                <!-- Prefix the Facebook App ID with 'fb' -->
                                <string>fbFACEBOOK_APP_ID</string>
                            </array>
                        </dict>
                    </array>
                    <key>FacebookAppID</key>
                    <!-- Facebook App ID -->
                    <string>FACEBOOK_APP_ID</string>
                    <key>FacebookDisplayName</key>
                    <!-- Facebook App Name from developer.facebook.com -->
                    <string>FACEBOOK_APP_NAME</string>
                </dict>
            </plist>
        </ios>
    </ti:app>
    ```

    To enable the use of Facebook dialogs (e.g., Login, Share), you also need to include the following key and values in `tiapp.xml`
    to handle the switching in and out of your app:

    ``` xml
    <key>LSApplicationQueriesSchemes</key>
    <array>
        <string>fbapi</string>
        <string>fb-messenger-api</string>
        <string>fbauth2</string>
        <string>fbshareextension</string>
    </array>
    ```

    If you choose to enable App Transport Security (ATS), you have to set the following keys and values in `tiapp.xml` `<ios>` section for facebook module:

    ``` xml
    <key>NSAppTransportSecurity</key>
    <dict>
        <key>NSExceptionDomains</key>
            <dict>
                <key>facebook.com</key>
                <dict>
                    <key>NSIncludesSubdomains</key> 
                    <true/>
                    <key>NSExceptionRequiresForwardSecrecy</key> 
                    <false/>
                </dict>
                <key>fbcdn.net</key>
                <dict>
                    <key>NSIncludesSubdomains</key> 
                    <true/>
                    <key>NSExceptionRequiresForwardSecrecy</key>  
                    <false/>
                </dict>
                <key>akamaihd.net</key>
                <dict>
                    <key>NSIncludesSubdomains</key> 
                    <true/>
                    <key>NSExceptionRequiresForwardSecrecy</key> 
                    <false/>
                </dict>
            </dict>
    </dict>
    ```

    ### Additional Android Setup Steps

    For the Android platform, you need to:

      * Add the Facebook Login activity to the Android manifest
      * Add the Facebook App ID to the Android resources `string.xml` file
      * Create a Facebook proxy and associate it with the current active activity

    **Modify the Android Manifest**

    Add the Facebook Login activity to the `android manifest` section of your `tiapp.xml` file.
    You may need to add the `manifest` and `application` elements.

    ``` xml
    <ti:app>
        <android xmlns:android="http://schemas.android.com/apk/res/android">
            <manifest>
                <application>
                    <activity android:name="com.facebook.FacebookActivity" 
                              android:theme="@android:style/Theme.Translucent.NoTitleBar" 
                              android:label="YourAppName" 
                              android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation" />
                    <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/facebook_app_id"/>

                    <provider android:name="com.facebook.FacebookContentProvider"
                              android:authorities="com.facebook.app.FacebookContentProvider<YOUR_APP_ID>"
                              android:exported="true" />
                </application>
            </manifest>
        </android>
    <ti:app>
    ```

    **Add the Facebook App ID to Android Resources**

    Add a string element to the `/platform/android/res/values/strings.xml` file with the `name`
    attribute set to `facebook_app_id` and the node text set to your Facebook App ID. Create the
    file if it does not exist.

    ``` xml
    <resources>
        <string name="facebook_app_id">FACEBOOK_APP_ID</string>
    </resources>
    ```
        
    **Generate the Key Hashes**

    Facebook requires you to add the Key Hash of the Android app in order for you to use the module. 
    Steps to get the Key Hash as follows. Alternatively, if you do not have the correct Key Hash on 
    the Android App, the App will give an error message when you login with the Key Hash of the App 
    which you can then copy.

    Use the following command to generate and receive the key-hashpath of your app. To do do, 
    replace `<sdk-version>` with your SDK-version and run:

    ``` sh
    keytool -exportcert -alias androiddebugkey -keystore ~/Library/Application\ Support/Titanium/mobilesdk/osx/<sdk-version>/dev_keystore | openssl sha1 -binary | openssl base64
    ```
    
    You would also require, to fill up the Google Play Package Name which is the Application ID 
    and the Class Name which is the Application ID followed by the Application Name concatenated 
    with the word Activity. Example, an App called Kitchensink with Application ID of 
    "com.appcelerator.kitchensink" will have the Class Name as "com.appcelerator.kitchensink.KitchensinkActivity".
    Alternatively, you can check the Class Name in `<project>/build/android/AndroidManifest.xml` which is 
    generated when you build the project. The launcher activity is the Class Name of the Application.

    For more info, please see https://developers.facebook.com/docs/android/getting-started

    **Create a Facebook Proxy**

    Use the [createActivityWorker()](Modules.Facebook.createActivityWorker) method to create a
    Facebook proxy. Pass the method a dictionary with the `lifecycleContainer` property set to
    the current active instance of a standalone Window (window not contained in a tab group) or TabGroup.
    Create the proxy before calling the `open()` method on either the window or tab group.

    The Facebook module needs to hook into the lifecycle events of the current active activity
    in order to synchronize its state between various activities in the application, for example,
    to update the label of the Login button when the user logs in or out of Facebook.

    Attach the proxy to the Window or TabGroup object, so it does not get garbage collected.

    ``` javascript
    win.fbProxy = fb.createActivityWorker({ lifecycleContainer: win });
    ```

    ## Module API Usage

    ### Facebook Login and Authorization

    To use Facebook, a user must logged into Facebook and explicitly authorize the application to
    perform certain actions, such as accessing profile information or posting status messages.

    Call [authorize](Modules.Facebook.authorize) to prompt the user to login and authorize
    the application. Before calling this method, set the <Modules.Facebook.permissions> property
    if additional permissions are needed.

    Which approach you take depends on your UI and how central Facebook is to your
    application.

    ### Manage Read and Write Permissions

    In order to read or write content to a user's Facebook page, you need to request permission from
    the user.  You can either request permissions when the user authorizes your application or
    request permissions on the fly.

    Before the user logs in and authorizes the application, you can request permissions for the
    application to use by either: Setting the <Modules.Facebook.permissions> property if you are using `authorize()` 
    method to have the user login and authorize the application.

    For a complete list of permissions, see the [official Facebook Permissions Reference](https://developers.facebook.com/docs/facebook-login/permissions/)

    **Refresh Application Permissions**

    Since the user can selectively turn application permissions on and off from their Facebook
    page, the application may need to refresh its granted permissions.

    To refresh the application's permissions, call the
    [refreshPermissionsFromServer()](Modules.Facebook.refreshPermissionsFromServer) method, then
    listen for the <Modules.Facebook.tokenUpdated> event to be notified when permissions are updated.

    ``` javascript
    fb.addEventListener('tokenUpdated', function (e) {
        Ti.API.info('Updated permissions: ' + JSON.stringify(fb.permissions));
    });
    fb.refreshPermissionsFromServer();
    ```

    ### Share Dialogs

    The Share dialog prompts a person to publish an individual story or an Open Graph story
    to their timeline. This does not require the user to authorize your app or any extended permissions,
    so it is the easiest way to enable sharing.

    Pass either method parameters you want to add to the post, such as a `link` or `hashtag`, or to
    share the user's status, do not pass any parameters to the methods. Note: The `link` parameter is
    **required** by the Facebook SDK.

    To monitor if the share request succeeded or not, listen to the <Modules.Facebook.shareCompleted>
    event.

    ``` javascript
    fb.addEventListener('shareCompleted', function (e) {
        if (e.success) {
            Ti.API.info('Share request succeeded.');
        } else {
            Ti.API.warn('Failed to share.');
        }
    });

    fb.presentShareDialog({
        link: 'https://appcelerator.com/',
        hashtag: 'codestrong'
    });
    ```

    For details on the Share dialog, see the
    [official Facebook Share Dialogs documentation](https://developers.facebook.com/docs/sharing/reference/share-dialog).

    ### Messenger Button

    The Messenger button provides a quick mechanism for users to share content to the Facebook Messenger.
    A click on the button can share the content to multiple users.

    To create a Messenger button, call the [createMessengerButton()](Modules.Facebook.createMessengerButton)
    method and pass the "mode" and "style" properties:

    ``` javascript
    var messengerButton = fb.createMessengerButton({
        mode: fb.MESSENGER_BUTTON_MODE_RECTANGULAR
        style: fb.MESSENGER_BUTTON_STYLE_BLUE
    });
    win.add(messengerButton);
    ```

    For more information, see the [MessengerButton API reference](Modules.Facebook.MessengerButton).

    ### Login Tracking (iOS only)

    The Ti.Facecebook iOS version 10.0.0 and later supports the `loginTracking` property in the [LoginButton](Modules.Facebook.LoginButton.loginTracking)
    and as a top-level property [loginTracking](Modules.Facebook.loginTracking). You can choose between the two constants
    [LOGIN_TRACKING_ENABLED](Modules.Facebook.LOGIN_TRACKING_ENABLED) (default) and [LOGIN_TRACKING_LIMITED](Modules.Facebook.LOGIN_TRACKING_LIMITED).

    For more information, see the [Login Tracking API reference](https://developers.facebook.com/docs/facebook-login/limited-login) and review the constants above.
extends: Titanium.Module
since: "3.1.0"
platforms: [android, iphone, ipad]
methods:
  - name: authorize
    summary: |
        Prompts the user to log in (if not already logged in) and authorize your application.
        You can also use [LoginButton](Modules.Facebook.LoginButton) to log in.
    description: |
        Be sure to set your required [permissions](Modules.Facebook.permissions) before
        calling `authorize`.

        A [login](Modules.Facebook.login) event is generated to indicate a successful or
        unsuccessful login attempt.

        #### iOS Platform Notes

        On iOS, do not request any write permissions before calling this method.  Use the
        [requestNewPublishPermissions()](Modules.Facebook.requestNewPublishPermissions)
        to request write permissions once the user authorizes the application.

  - name: createActivityWorker
    summary: |
        Creates a Facebook proxy to hook into the activity of either a standalone <Titanium.UI.Window>
        (not inside a TabGroup) or <Titanium.UI.TabGroup>.
    description: |
        Set the `lifecycleContainer` property in the dictionary passed to the method to either
        the current active  instance of a <Titanium.UI.Window> or <Titanium.UI.TabGroup> in order to monitor the activity's
        lifecycle events, required by Facebook to synchronize its state between various
        activities in the application.

        The proxy object must be created before calling the `open()` method on the associated Window
        or TabGroup.
    parameters:
      - name: parameters
        summary: |
            Properties to set on a new object, including any defined by <Titanium.Proxy> except
            those marked not-creation or read-only.

            **Note:** You must set the `lifecycleContainer` property.
        type: Dictionary<Titanium.Proxy>
    returns:
        type: Titanium.Proxy
    since: "4.0.0"
    platforms: [android]

  - name: initialize
    summary: |
        Loads a cached Facebook session if available, then fires the `login` event.
    description: |
        Be sure to set your [login](Modules.Facebook.login) and [logout](Modules.Facebook.logout)
        event listeners before calling `initialize`. 
        
        **Note: This method needs to be called before calling <Modules.Facebook.authorize> 
        in order to be handle the auth-flow correctly. Otherwise, you might see a white screen without
        any response.
    since: "4.0.0"

  - name: logCustomEvent
    summary: Logs a custom event to Facebook.
    description: |
        **From the Facebook API Reference:**

        Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers
        in a number of situations:

          * when an event count threshold is passed (currently 100 logged events).
          * when a time threshold is passed (currently 15 seconds).
          * when an app has gone to background and is then brought back to the foreground.

        Some things to note when logging events:

          * There is a limit on the number of unique event names an app can use, on the order of 300.
          * Event names must be between 2 and 40 characters and must consist of alphanumeric
            characters, `_`, `-` or spaces.
    parameters:
      - name: event
        summary: Arbitrary string to log as an event.
        type: String
      - name: valueToSum
        summary: |
            An arbitrary number that can represent any value (e.g., a price or a quantity). 
            When reported, all of the valueToSum properties will be summed together in Facebook 
            Analytics for Apps (since 5.4.0).
        type: Number
        optional: true
      - name: params
        summary: |
            A dictionary object containing optional parameters (since 5.4.0).
        type: Object
        optional: true
    since: "4.0.0"
    
  - name: logPurchase
    summary:  Log a purchase of the specified amount, in the specified currency.
    parameters:
      - name: amount
        summary: |
            Purchase amount to be logged, as expressed in the specified currency.
            This value will be rounded to the thousandths place (e.g., 12.34567 becomes 12.346).
        type: Number
      - name: currency
        summary: |
            Currency, is denoted as, e.g. "USD", "EUR", "GBP".  See ISO-4217 for specific values.
        type: String
      - name: parameters
        summary: |
            A dictionary object containing optional parameters (since 8.0.0 in android and since 7.0.0 in ios). 
        type: Object
        optional: true
    since: "5.2.0"

  - name: logout
    summary: Clears the OAuth `accessToken` and logs out the user.

  - name: presentShareDialog
    summary: Opens a Facebook link share dialog.
    description: |
        Note: The `link` parameter is **required** by the Facebook SDK.

        Listen for the <Modules.Facebook.shareCompleted> to be notified if the attempt was
        successful or not.
    parameters:
      - name: params
        summary: A dictionary object containing the required and optional parameters.
        type: ShareLinkContentParams
    since: "4.0.0"

  - name: presentPhotoShareDialog
    summary: Opens a Facebook photo share dialog.
    description: |
        Note: The `images` parameter is **required** by the Facebook SDK.

        Android Note: In order to share images on Android, the Facebook app needs to be installed and the
        "content provider" settings in your Android manifest needs to be configured:

        ``` xml    
        <provider android:name="com.facebook.FacebookContentProvider"
                  android:authorities="com.facebook.app.FacebookContentProvider<YOUR_APP_ID>"
                  android:exported="true" />
        ```

        Listen for the <Modules.Facebook.shareCompleted> to be notified if the attempt was
        successful or not.
    parameters:
      - name: params
        summary: A dictionary object containing the required and optional parameters.
        type: SharePhotoContentParams
    since: "7.4.0"

  - name: refreshPermissionsFromServer
    summary: Makes a request to Facebook to get the latest permissions granted.
    description: |
        Facebook now grants total control over granted permissions, and if the user modified the permissions
        outside of your app your cached token may not be updated.

        Listen for the <Modules.Facebook.tokenUpdated> event to be notified if the attempt was
        successful.
    since: "4.0.0"

  - name: requestWithGraphPath
    summary: Makes a Facebook Graph API request.
    description: |
        If the request requires user authorization, the user must be logged in, and your app
        must be authorized to make the request. You can check the
        [loggedIn](Modules.Facebook.loggedIn) property to determine if the user is logged in.

        Every Facebook object has an associated path. For example, "me" requests information about
        the current user.

        For a complete list of Graph API methods, parameters and return types, see the
        [official Facebook Graph API documentation](https://developers.facebook.com/docs/graph-api).
    parameters:

      - name: path
        summary: Graph API path to request.
        type: String

      - name: params
        summary: |
            A dictionary object for setting parameters required by the call, if any.
        type: Dictionary

      - name: httpMethod
        summary: The HTTP method (GET/POST/DELETE) to use for the call.
        type: String

      - name: callback
        summary: Callback to invoke  when the request completes.
        type: Callback<FacebookGraphResponse>

  - name: requestNewReadPermissions
    summary: Makes a request to Facebook for additional read permissions.
    description: |
        Note that it is not an error for the user to 'Skip' your requested permissions,
        so you should check the module's `permissions` property following the call.
    parameters:
      - name: permissions
        summary: |
            Array of additional permissions to request. For a complete list of permissions, see the
            [official Facebook Permissions Reference](https://developers.facebook.com/docs/facebook-login/permissions)
        type: Array<String>

      - name: callback
        summary: Callback to invoke when the request completes.
        type: Callback<FacebookPermissionResponse>
    since: "4.0.0"
    deprecated:
      since: "8.2.0"
      notes: Request all permissions via the `permissions` property before calling `authorize`.

  - name: requestNewPublishPermissions
    summary: Makes a request to Facebook for additional write permissions.
    description: |
        Note that it is not an error for the user to 'Skip' your requested permissions,
        so you should check the module's `permissions` property following the call.
    parameters:
      - name: permissions
        summary: |
            Array of additional permissions to request. For a complete list of permissions, see the
            [official Facebook Permissions Reference](https://developers.facebook.com/docs/facebook-login/permissions)
        type: Array<String>

      - name: audience
        summary: |
            The extent of the visibility write permissions will have.
        type: Number
        constants: Modules.Facebook.AUDIENCE_*

      - name: callback
        summary: Callback to invoke when the request completes.
        type: Callback<FacebookPermissionResponse>
    since: "4.0.0"
    deprecated:
      since: "8.2.0"
      notes: Request all permissions via the `permissions` property before calling `authorize`.

  - name: fetchDeferredAppLink
    summary: Fetch the deferred app link
    description: |
        Deferred deep linking allows you to send people to a custom view after 
        they installed your app via the app store.
    parameters:
      - name: callback
        summary: Callback to invoke when the request completes.
        type: Callback<FacebookDeferredAppLinkResponse>
    since: "5.4.0"

  - name: setCurrentAccessToken
    summary: Set a new access token for using Facebook services.
    parameters:
      - name: params
        summary: |
            A dictionary object containing required and optional parameters. 
            
            Note: There is an [open issue](https://developers.facebook.com/bugs/675847029242342/) in the native Facebook SDK causing the appID
            from not being updated although specified in the parameters. You can use 
            the <Modules.Facebook.appID> setter to change the appID inside your app.
        type: CurrentAccessTokenParams
    since: "6.2.0"
    platforms: [iphone, ipad]

  - name: logPushNotificationOpen
    summary: Log an app event that tracks that the application was open via Push Notification.
    platforms: [android, iphone, ipad]
    since: "6.1.0"
    parameters:
      - name: payload
        summary: Notification payload received via in the  push-notification callback.
        type: Dictionary

      - name: action
        optional: true
        summary: Name of the action that was taken.
        type: String

  - name: setPushNotificationsDeviceToken
    summary: Sets a device token to register the current application installation for push notifications.
    platforms: [iphone, ipad, android]
    since: "6.1.0"
    parameters:
      - name: deviceToken
        summary: Device-token received when registering for push-notifications.
        type: String

events:
  - name: login
    summary: Fired at session login.
    properties:
      - name: success
        summary: |
            Indicates if the user was logged in successfully.
            Returns `true` if request succeeded, `false` otherwise.
        type: Boolean

      - name: cancelled
        summary: |
            Indicates if the user canceled the login request by closing the dialog.
        type: Number

      - name: error
        summary: |
            Error message, if any returned.
            Will be undefined if `success` is `true`.
        type: String

      - name: code
        summary: |
            Error code.
            Error code will be 0 if `success` is `true`, nonzero otherwise. If the error
            was generated by the operating system, that system's error value is used.
            Otherwise, this value will be -1.
        type: Number

      - name: uid
        summary: User ID returned by Facebook if the login was successful.
        type: String

      - name: data
        summary: |
            Data returned by Facebook when we query for the UID (using graph path "me")
            after a successful login. Data is in JSON format, and includes information
            such as user name, locale and gender.
        type: String

  - name: logout
    summary: Fired at session logout.

  - name: requestDialogCompleted
    summary: Fired when the Send Request dialog is closed.
    properties:
      - name: success
        summary: |
            Returns `true` if request succeeded, `false` otherwise.
        type: Boolean

      - name: cancelled
        summary: |
            Indicates if the user canceled the request by closing the dialog.
        type: Number

      - name: error
        summary: |
            Error message, if any returned.
            Will be undefined if `success` is `true`.
        type: String

      - name: data
        summary: |
            data returned by Facebook. See Facebook reference for details.
        type: Dictionary
    since: 4.0.2

  - name: shareCompleted
    summary: Fired when the Share dialog or Web Share dialog is closed.
    properties:
      - name: success
        summary: |
            Returns `true` if request succeeded, `false` otherwise.
        type: Boolean

      - name: cancelled
        summary: |
            Indicates if the user canceled the request by closing the dialog.
        type: Number

      - name: error
        summary: |
            Error message, if any returned.
            Will be undefined if `success` is `true`.
        type: String
    since: "4.0.0"

  - name: inviteCompleted
    summary: Fired when the Invite dialog is closed.
    properties:
      - name: success
        summary: |
            Returns `true` if request succeeded, `false` otherwise.
        type: Boolean

      - name: cancelled
        summary: |
            Indicates if the user canceled the request by closing the dialog.
        type: Number

      - name: error
        summary: |
            Error message, if any returned.
            Will be undefined if `success` is `true`.
        type: String
    since: 5.4.0

  - name: tokenUpdated
    summary: Fired when [refreshPermissionsFromServer](Modules.Facebook.refreshPermissionsFromServer) is completed.
    since: "4.0.0"

properties:
  - name: AUDIENCE_ONLY_ME
    summary: Published content is only visible to the user.
    description: |
        Use to set the default audience with either [LoginButton.audience](Modules.Facebook.LoginButton.audience)
        or <Modules.Facebook.requestNewPublishPermissions>.
    type: Number
    permission: read-only
    since: "4.0.0"

  - name: AUDIENCE_FRIENDS
    summary: Published content is only visible to the user and user's friends.
    description: |
        Use to set the default audience with either [LoginButton.audience](Modules.Facebook.LoginButton.audience)
        or <Modules.Facebook.requestNewPublishPermissions>.
    type: Number
    permission: read-only
    since: "4.0.0"

  - name: AUDIENCE_EVERYONE
    summary: Published content is visible to all Facebook users.
    description: |
        Use to set the default audience with either [LoginButton.audience](Modules.Facebook.LoginButton.audience)
        or <Modules.Facebook.requestNewPublishPermissions>.
    type: Number
    permission: read-only
    since: "4.0.0"

  - name: ACTION_TYPE_NONE
    summary: No action type.
    description: |
        Use to set the actionType with [presentSendRequestDialog()](Modules.Facebook.presentSendRequestDialog)
    type: Number
    permission: read-only
    since: "5.0.0"

  - name: ACTION_TYPE_SEND
    summary: The user is sending an object to the friends.
    description: |
        Use to set the actionType with [presentSendRequestDialog()](Modules.Facebook.presentSendRequestDialog)
    type: Number
    permission: read-only
    since: "5.0.0"

  - name: ACTION_TYPE_ASK_FOR
    summary: The user is asking for an object from friends.
    description: |
        Use to set the actionType with [presentSendRequestDialog()](Modules.Facebook.presentSendRequestDialog)
    type: Number
    permission: read-only
    since: "5.0.0"

  - name: ACTION_TYPE_TURN
    summary: It is the turn of the friends to play against the user in a match.
    description: |
        Use to set the actionType with [presentSendRequestDialog()](Modules.Facebook.presentSendRequestDialog)
    type: Number
    permission: read-only
    since: "5.0.0"

  - name: FILTER_NONE
    summary: No filter all friends can be displayed.
    description: |
        Use to set the filter with [presentSendRequestDialog()](Modules.Facebook.presentSendRequestDialog)
    type: Number
    permission: read-only
    since: "5.0.0"

  - name: FILTER_APP_USERS
    summary: Friends using the app can be displayed.
    description: |
        Use to set the filter with [presentSendRequestDialog()](Modules.Facebook.presentSendRequestDialog)
    type: Number
    permission: read-only
    since: "5.0.0"

  - name: FILTER_APP_NON_USERS
    summary: Friends not using the app can be displayed.
    description: |
        Use to set the filter with [presentSendRequestDialog()](Modules.Facebook.presentSendRequestDialog)
    type: Number
    permission: read-only
    since: "5.0.0"

  - name: LOGIN_BUTTON_TOOLTIP_BEHAVIOR_AUTOMATIC
    summary: |
        The default behavior. The tooltip will only be displayed if the app is eligible 
        (determined by possible server round trip).
    type: Number
    permission: read-only
    since: "6.1.0"
    platforms: [iphone, ipad, android]

  - name: LOGIN_BUTTON_TOOLTIP_BEHAVIOR_FORCE_DISPLAY
    summary: Force display of the tooltip (typically for UI testing).
    type: Number
    permission: read-only
    since: "6.1.0"
    platforms: [iphone, ipad, android]

  - name: LOGIN_BUTTON_TOOLTIP_BEHAVIOR_DISABLE
    summary: |
        Force disable. In this case you can still exert more refined control by manually 
        constructing a new login button.
    type: Number
    permission: read-only
    since: "6.1.0"
    platforms: [iphone, ipad, android]

  - name: LOGIN_BUTTON_TOOLTIP_STYLE_NEUTRAL_GRAY
    summary: Dark gray background, white text, light gray close button.
    type: Number
    permission: read-only
    since: "6.1.0"
    platforms: [iphone, ipad, android]

  - name: LOGIN_BUTTON_TOOLTIP_STYLE_FRIENDLY_BLUE
    summary: Light blue background, white text, faded blue close button.
    type: Number
    permission: read-only
    since: "6.1.0"
    platforms: [iphone, ipad, android]

  - name: SHARE_DIALOG_MODE_AUTOMATIC
    summary: Acts with the most appropriate mode that is available.
    description: Use with [presentShareDialog()](Modules.Facebook.presentShareDialog).
    type: Number
    permission: read-only
    since: "6.0.0"
    platforms: [iphone, ipad, android]

  - name: SHARE_DIALOG_MODE_NATIVE
    summary: Displays the dialog in the main native Facebook app.
    description: Use with [presentShareDialog()](Modules.Facebook.presentShareDialog).
    type: Number
    permission: read-only
    since: "6.0.0"
    platforms: [iphone, ipad, android]

  - name: SHARE_DIALOG_MODE_SHARE_SHEET
    summary: Displays the dialog in the iOS integrated share sheet.
    description: Use with [presentShareDialog()](Modules.Facebook.presentShareDialog).
    type: Number
    permission: read-only
    since: "6.0.0"
    platforms: [iphone, ipad]

  - name: SHARE_DIALOG_MODE_BROWSER
    summary: Displays the dialog in Safari.
    description: Use with [presentShareDialog()](Modules.Facebook.presentShareDialog).
    type: Number
    permission: read-only
    since: "6.0.0"
    platforms: [iphone, ipad]

  - name: SHARE_DIALOG_MODE_WEB
    summary: Displays the dialog in a web view within the app.
    description: Use with [presentShareDialog()](Modules.Facebook.presentShareDialog).
    type: Number
    permission: read-only
    since: "6.0.0"
    platforms: [iphone, ipad, android]

  - name: SHARE_DIALOG_MODE_FEED_BROWSER
    summary: Displays the feed dialog in Safari.
    description: Use with [presentShareDialog()](Modules.Facebook.presentShareDialog).
    type: Number
    permission: read-only
    since: "6.0.0"
    platforms: [iphone, ipad]

  - name: SHARE_DIALOG_MODE_FEED_WEB
    summary: Displays the feed dialog in a webview within the app.
    description: Use with [presentShareDialog()](Modules.Facebook.presentShareDialog).
    type: Number
    permission: read-only
    since: "6.0.0"
    platforms: [iphone, ipad, android]

  - name: EVENT_NAME_COMPLETED_REGISTRATION
    summary: Log this event when a user has completed registration with the app.
    type: String
    permission: read-only
    since: {android: "8.0.0", iphone: "7.0.0", ipad: "7.0.0"}
    platforms: [iphone, ipad, android]

  - name: EVENT_NAME_VIEWED_CONTENT
    summary: Log this event when a user has viewed a form of content in the app.
    type: String
    permission: read-only
    since: {android: "8.0.0", iphone: "7.0.0", ipad: "7.0.0"}
    platforms: [iphone, ipad, android]

  - name: EVENT_NAME_ADDED_TO_CART
    summary: Log this event when the user has added an item to their cart.
    type: String
    permission: read-only
    since: {android: "8.0.0", iphone: "7.0.0", ipad: "7.0.0"}
    platforms: [iphone, ipad, android]

  - name: EVENT_NAME_INITIATED_CHECKOUT
    summary: Log this event when the user has entered the checkout process.
    type: String
    permission: read-only
    since: {android: "8.0.0", iphone: "7.0.0", ipad: "7.0.0"}
    platforms: [iphone, ipad, android]

  - name: EVENT_NAME_ADDED_PAYMENT_INFO
    summary: Log this event when the user has entered their payment info.
    type: String
    permission: read-only
    since: {android: "8.0.0", iphone: "7.0.0", ipad: "7.0.0"}
    platforms: [iphone, ipad, android]

  - name: EVENT_PARAM_CONTENT
    summary: |
        Parameter key used to specify data for the one or more pieces of content being logged about.
    type: String
    permission: read-only
    since: {android: "8.0.0", iphone: "7.0.0", ipad: "7.0.0"}
    platforms: [iphone, ipad, android]

  - name: EVENT_PARAM_CONTENT_ID
    summary: |
        Parameter key used to specify an ID for the specific piece of content being logged about.
    type: String
    permission: read-only
    since: {android: "8.0.0", iphone: "7.0.0", ipad: "7.0.0"}
    platforms: [iphone, ipad, android]

  - name: EVENT_PARAM_CONTENT_TYPE
    summary: |
        Parameter key used to specify a generic content type/family for the logged event.
    type: String
    permission: read-only
    since: {android: "8.0.0", iphone: "7.0.0", ipad: "7.0.0"}
    platforms: [iphone, ipad, android]

  - name: EVENT_PARAM_CURRENCY
    summary: |
        Parameter key used to specify currency used with logged event.
    type: String
    permission: read-only
    since: {android: "8.0.0", iphone: "7.0.0", ipad: "7.0.0"}
    platforms: [iphone, ipad, android]

  - name: EVENT_PARAM_NUM_ITEMS
    summary: |
        Parameter key used to specify how many items are being processed.
    type: String
    permission: read-only
    since: {android: "8.0.0", iphone: "7.0.0", ipad: "7.0.0"}
    platforms: [iphone, ipad, android]

  - name: EVENT_PARAM_PAYMENT_INFO_AVAILABLE
    summary: |
        Parameter key used to specify whether payment info is available.
    type: String
    permission: read-only
    since: {android: "8.0.0", iphone: "7.0.0", ipad: "7.0.0"}
    platforms: [iphone, ipad, android]

  - name: accessToken
    summary: OAuth token set after a successful `authorize`.
    type: String
    permission: read-only

  - name: accessTokenExpired
    summary: Returns whether the <Modules.Facebook.accessToken> is expired by checking its <Modules.Facebook.expirationDate> property.
    type: Boolean
    permission: read-only
    since: "7.4.0"

  - name: accessTokenActive
    summary: Returns `true` if the <Modules.Facebook.accessToken> is not `null` AND not expired.
    type: Boolean
    permission: read-only
    since: "7.4.0"

  - name: appID
    summary: |
        If not explicitly set, the default will be read from the application's 
        plist (FacebookAppID) which is the recommended way. 
        
        Since Titanium SDK 6.2.0, this property also has a getter to return the currently set appID.
    type: String

  - name: canPresentOpenGraphActionDialog
    summary: |
        Checks if the device can support the use of the Facebook Open Graph action dialog from the Facebook App.
    type: Boolean
    since: "4.0.0"
    platforms: [android]
    permission: read-only

  - name: expirationDate
    summary: Time at which the `accessToken` expires.
    type: Date
    permission: read-only

  - name: loggedIn
    summary: Indicates if the user is logged in.
    type: Boolean
    permission: read-only

  - name: MESSENGER_BUTTON_MODE_CIRCULAR
    summary: |
        Use with [MessengerButton.mode](Modules.Facebook.MessengerButton.mode) to specify
        the default send button reading "Send".
    description: |
        You can localize the button by localizing "Send" in your strings.xml. Learn more about
        that topic [here](http://docs.appcelerator.com/platform/latest/#!/guide/Internationalization).
    type: Number
    permission: read-only
    since: "5.4.0"
    platforms: [iphone, ipad]

  - name: MESSENGER_BUTTON_MODE_RECTANGULAR
    summary: |
        Use with [MessengerButton.mode](Modules.Facebook.MessengerButton.mode) to specify
        the default send button reading "Send".
    description: |
        You can localize the button by localizing "Send" in your strings.xml. Learn more about
        that topic [here](http://docs.appcelerator.com/platform/latest/#!/guide/Internationalization).
    type: Number
    permission: read-only
    since: "5.4.0"
    platforms: [iphone, ipad]

  - name: loginTracking
    summary: Gets or sets the desired tracking preference to use for login attempts.
    type: Number
    constants: [Modules.Facebook.LOGIN_TRACKING_*]
    default: Modules.Facebook.LOGIN_TRACKING_ENABLED
    since: "10.0.0"
    platforms: [iphone, ipad]

  - name: LOGIN_TRACKING_ENABLED
    summary: |
        Use with [LoginButton.loginTracking](Modules.Facebook.LoginButton.loginTracking) or the top-level
        [loginTracking](Modules.Facebook.loginTracking) property to set the desired tracking preference.
    description: |
        For more information on the differences between
        `LOGIN_TRACKING_ENABLED` and `LOGIN_TRACKING_LIMITED` see: https://developers.facebook.com/docs/facebook-login/ios/limited-login/
    type: Number
    permission: read-only
    since: "10.0.0"
    platforms: [iphone, ipad]

  - name: LOGIN_TRACKING_LIMITED
    summary: |
        Use with [LoginButton.loginTracking](Modules.Facebook.LoginButton.loginTracking) or the top-level
        [loginTracking](Modules.Facebook.loginTracking) property to set the desired tracking preference.
    description: |
        For more information on the differences between
        `LOGIN_TRACKING_ENABLED` and `LOGIN_TRACKING_LIMITED` see: https://developers.facebook.com/docs/facebook-login/ios/limited-login/
    type: Number
    permission: read-only
    since: "10.0.0"
    platforms: [iphone, ipad]

  - name: permissions
    summary: Array of permissions to request for your app.
    description: |
        Be sure the permissions you want are set before calling
        [authorize](Modules.Facebook.authorize).

        For a complete list of permissions, see the
        [official Facebook Permissions Reference](https://developers.facebook.com/docs/facebook-login/permissions)

        #### iOS Platform Notes

        On iOS, do not request any write permissions before calling the `authorize()` method.  Use the
        [requestNewPublishPermissions()](Modules.Facebook.requestNewPublishPermissions)
        to request write permissions once the user authorizes the application.

        **Prior to Release 4.0.0**

        To use the build-in iOS 6 login, this property cannot contain any of the following:
        offline_access, publish_actions, publish_stream, publish_checkins,
        ads_management, create_event, rsvp_event, manage_friendlists, manage_notifications,
        or manage_pages.
    type: Array<String>

  - name: uid
    summary: Unique user ID returned from Facebook.
    type: String
    permission: read-only

examples:

  - title: Authorize
    example: |
        Shows official Facebook dialog for logging in the user and prompting the user to approve your
        requested permissions.  Listen for the module's [login](Modules.Facebook.login) event to
        determine whether the request succeeded.

        ``` javascript
        var fb = require('facebook');
        fb.initialize();
        fb.addEventListener('login', function (e) {
            if (e.success) {
                alert('Logged in with User ID: ' + e.uid + ', Name: ' + JSON.parse(e.data).name);
                label.text = 'Logged In = ' + fb.loggedIn;
            }
            else if (e.cancelled) {
                // user cancelled
                alert('cancelled');
            }
            else {
                alert(e.error);
            }
        });
        fb.authorize();
        ```

  - title: Logout
    example: |
        Logout the user and forget the authorization token.  The
        [logout](Modules.Facebook.logout) event is fired after the user is logged out.

        ``` javascript
        fb.addEventListener('logout', function (e) {
            alert('Logged out');
        });
        fb.logout();
        ```

  - title: Authorize/Logout Using the Facebook LoginButton
    example: |
        You can use the the native Facebook [LoginButton](Modules.Facebook.LoginButton)
        to allow the user to log in as required. The button updates its state automatically depending
        on whether the user is logged in or not.  When the user is logged in, then the button
        will show "Logout", and vice-versa.

        Note that you don't need to set a click listener or anything else on the button.
        To be notified when the user logs in or out, add event listeners for the
        [login](Modules.Facebook.login) and [logout](Modules.Facebook.logout) events
        provided by the Facebook module, as in the example below.

        ``` javascript
        // Don't forget to set your requested permissions, else the login button won't be effective.
        var win = Ti.UI.createWindow({ backgroundColor: 'white' });
        var fb = require('facebook');

        fb.addEventListener('login', function (e) {
            if (e.success) {
                alert('Logged in');
            }
        });
        fb.addEventListener('logout', function (e) {
            alert('Logged out');
        });

        if (Ti.Platform.name === 'android') {
            win.fbProxy = fb.createActivityWorker({ lifecycleContainer: win });
        }

        // Add the button.  Note that it doesn't need a click event listener.
        win.add(fb.createLoginButton({
                readPermissions: ['read_stream','email'],
                top: 50
        }));

        win.open()
        ```

  - title: Simple Graph API Call
    example: |
        This example makes a call to the "me" graph path, which represents the current
        user. The JSON results are simply displayed in an alert.  This example assumes
        the user is already logged in. You can check this with <Modules.Facebook.loggedIn>.

        ``` javascript
        fb.requestWithGraphPath('me', {}, 'GET', function (e) {
            if (e.success) {
                alert(e.result);
            } else if (e.error) {
                alert(e.error);
            } else {
                alert('Unknown response');
            }
        });
        ```

  - title: Post a Photo Using the Graph API from the Gallery.
    example: |
        This example posts a photo to the user's account using the Graph API.
        This requires the "publish_actions" permission.

        ``` javascript
        var b1 = Ti.UI.createButton({
            title: 'Upload Photo from Gallery with Graph API'
        });

        b1.addEventListener('click', function () {
            Titanium.Media.openPhotoGallery({
                success: function (event) {
                    b1.title = 'Uploading Photo...';
                    var data = { picture: event.media };
                    // If publish_actions permission is not granted, request it
                    if (fb.permissions.indexOf('publish_actions') === -1) {
                        fb.requestNewPublishPermissions(['publish_actions'], fb.AUDIENCE_FRIENDS, function (e) {
                            if (!e.success) {
                                Ti.API.info('Publish permission error');
                                return;
                            }
                            if (e.cancelled) {
                                Ti.API.info('Publish permission cancelled');
                                return;
                            }
                            
                            Ti.API.info('Permissions: ' + fb.permissions);
                            fb.requestWithGraphPath('me/photos', data, 'POST', showRequestResult);
                        });
                    } else {
                        fb.requestWithGraphPath('me/photos', data, 'POST', showRequestResult);
                    }
                },
                error: function (e) {
                    Ti.API.error('Error opening photo gallery: ' + e.error);
                }
            });
        });
        ```

        For more information on posting photos, see:

        * [Photo in the Facebook Graph API Reference](https://developers.facebook.com/docs/graph-api/reference/photo)

  - title: Post a Photo Using the Graph API with an image in resources directory
    example: |
        This example posts a photo to the user's account using the Graph API.
        This requires the "publish_actions" permission.

        ``` javascript
        var b2 = Ti.UI.createButton({
            title: 'Upload Photo from file with Graph API',
            left: 10, 
            right: 10, 
            top: 90, 
            height: 80
        });

        b2.addEventListener('click', function () {
            b2.title = 'Uploading Photo...';
            var f = Ti.Filesystem.getFile(Ti.Filesystem.resourcesDirectory, 'images', 'flower.jpg');
            var blob = f.read();
            var data = {
                picture: blob
            };
            // If publish_actions permission is not granted, request it
            if (fb.permissions.indexOf('publish_actions') < 0) {
                fb.requestNewPublishPermissions(['publish_actions'], fb.AUDIENCE_FRIENDS, function (e) {
                    if (e.success) {
                        Ti.API.info('Permissions: ' + fb.permissions);
                        fb.requestWithGraphPath('me/photos', data, 'POST', showRequestResult);
                    }
                    if (e.error) {
                        Ti.API.info('Publish permission error');
                    }
                    if (e.cancelled) {
                        Ti.API.info('Publish permission cancelled');
                    }
                });
            } else {
                fb.requestWithGraphPath('me/photos', data, 'POST', showRequestResult);
            }
        });
        ```

        For more information on posting photos, see:

        * [Photo in the Facebook Graph API Reference](https://developers.facebook.com/docs/graph-api/reference/photo)

  - title: Show a basic Share Dialog
    example: |
        This example shows how to show a basic Share Dialog.

        ``` javascript
        var button = Ti.UI.createButton({
            title: 'Share URL with Share Dialog'
        });

        button.addEventListener('click', function () {
            fb.presentShareDialog({
                link: 'https://appcelerator.com/',
                hashtag: 'codestrong'
            });
        });
        ```

        For more information on Facebook Dialogs, see:

        * [Facebook Share Dialog Reference](https://developers.facebook.com/docs/sharing/reference/share-dialog)

  - title: Share content to the Facebook Messenger
    example: |
        This example shows how to share images, GIF's and videos to the Facebook messenger.

        ``` javascript
        var btn = Ti.UI.createButton({
            title: 'Share media to messenger'
        });
        btn.addEventListener('click', function (e) {
            var media = [
                Ti.UI.createView({ height: 30, width: 30,backgroundColor: '#ff0' }).toImage(), // Image blob
                Ti.Filesystem.getFile(Ti.Filesystem.resourcesDirectory, 'test.gif').read(), // GIF Blob
                Ti.Filesystem.getFile(Ti.Filesystem.resourcesDirectory, 'movie.mp4').read() // Video Blob
            ];

            var options = Ti.UI.createOptionDialog({
                options: ['Photo', 'GIF', 'Video', 'Cancel'],
                cancel: 3
            });
            options.addEventListener('click', function (e) {
                if (e.index == 3) {
                    return;
                }
                FB.shareMediaToMessenger({
                    media: media[e.index],
                    metadata: 'Ti rocks!',
                    link: 'https://appcelerator.com',
                });
            });
            options.show();
        });
        ```

        For more information on sharing media to the Facebook Messenger, see:

        * [Facebook Messenger Reference](https://developers.facebook.com/docs/messenger)

  - title: Requesting additional permissions
    example: |
        This example shows how to use the `requestNewPublishPermissions` method to request additional permissions
        to publish a post to the user's wall.

        ``` javascript
        fb.requestNewPublishPermissions(['publish_actions'], fb.AUDIENCE_FRIENDS, function (e) {
            if (e.success) {
                fb.requestWithGraphPath('me/feed', null, 'POST', showRequestResult);
            } else {
                Ti.API.debug('Failed authorization due to: ' + e.error);
            }
        });
        ```

---
name: FacebookGraphResponse
extends: ErrorResponse
summary: |
    Argument passed to the graph API callback, in response to a
    [requestWithGraphPath](Modules.Facebook.requestWithGraphPath) call.
platforms: [android, iphone, ipad]
since: 3.1.0
properties:
  - name: path
    summary: Graph API path of the original request.
    type: String

  - name: result
    summary: |
        If successful, returns the JSON response returned by Facebook.
        If the request is not successfully completed, the result is undefined.
    type: String

---
name: FacebookPermissionResponse
extends: ErrorResponse
summary: Argument passed to the dialog callback when a dialog is completed or canceled.
description: |
    The `success` and `cancelled` properties may not be reliable for dialogs. In the event
    that the user canceled the dialog, the `result` field is `undefined`.
platforms: [android, iphone, ipad]
since: "4.0.0"
properties:
  - name: cancelled
    summary: Indicates if the user canceled the dialog.
    type: Boolean

  - name: success
    summary: |
        Indicates if successful
    type: Boolean

  - name: error
    summary: |
        Error message, if any returned.
        Will be undefined if `success` is `true`.
    type: String

---
name: SharePhotoContentParams
summary: |
    Parameters to pass to the the [presentPhotoShareDialog()](Modules.Facebook.presentPhotoShareDialog) method.
since: 7.4.0
properties:
  - name: photos
    summary: |
        An array of photos that is represented by an object of `photo`, `caption` and `userGenerated`
        parameters.
    type: Array<SharePhotoContentPhotoParams>
  - name: mode
    summary: The mode to select for presenting a share dialog.
    description: |
        The automatic mode will progressively check the availability of different modes and 
        open the most appropriate mode for the dialog that is available.
    type: Number
    optional: true
    default: Modules.Facebook.SHARE_DIALOG_MODE_AUTOMATIC
    constants: Modules.Facebook.SHARE_DIALOG_MODE_*

---
name: SharePhotoContentPhotoParams
summary: |
    Parameters to pass to the `images` property of the [presentPhotoShareDialog()](Modules.Facebook.presentPhotoShareDialog)
    method.
properties:
  - name: photo
    summary: |
        The (required) photo. Can either be a file on the local disk (represented as a <Titanium.Blob>)
        or a photo URL (represented as a String).
    type: [Titanium.Blob, String]
    optional: false
  - name: caption
    summary: |
        The user generated caption for the photo. Note that the 'caption' must come from
        the user, as pre-filled content is forbidden by the Platform Policies (2.3).
    type: String

---
name: ShareLinkContentParams
summary: |
    Optional parameters to pass to the [presentShareDialog()](Modules.Facebook.presentShareDialog) method.
since: "4.0.0"
platforms: [android, iphone, ipad]
properties:
  - name: link
    summary: URL to share (required for any link of sharing).
    type: String

  - name: to
    summary: List of IDs for taggable people to tag with this content.
    description: |
        See Facebook documentation for Taggable Friends (https://developers.facebook.com/docs/graph-api/reference/user/taggable_friends)
    type: Array<String>

  - name: placeID
    summary: The ID for a place to tag with this content.
    type: String

  - name: referal
    summary: A value to be added to the referrer URL when a person follows a link from this shared content on feed.
    type: String

  - name: hashtag
    summary: Hashtag for the content being shared.
    type: String

  - name: mode
    summary: The mode to select for presenting a share dialog. Only used in `presentShareDialog`.
    description: |
        The automatic mode will progressively check the availability of different modes and 
        open the most appropriate mode for the dialog that is available.
    type: Number
    optional: true
    default: Modules.Facebook.SHARE_DIALOG_MODE_AUTOMATIC
    constants: Modules.Facebook.SHARE_DIALOG_MODE_*
    since: "6.0.0"

---
name: RequestDialogParams
summary: |
    Parameters to pass to [presentSendRequestDialog()](Modules.Facebook.presentSendRequestDialog) method.
since: "4.0.0"
platforms: [android, iphone, ipad]
properties:
  - name: message
    summary: Message to send with the request.
    type: String
    optional: false

  - name: title
    summary: Title of request.
    type: String
    optional: true

  - name: recipients
    summary: Array of pre-selected facebook ids.
    type: Array<String>
    optional: true
    since: "5.0.0"

  - name: recipientSuggestions
    summary: An array of user IDs that will be included in the dialog as the first suggested friends. Cannot be used together with filters.
    type: Array<String>
    optional: true
    since: "5.0.0"

  - name: data
    summary: Additional data to send with the request object.
    type: Dictionary
    optional: true

  - name: actionType
    summary: The nature of the request. Required if objectID is set.
    type: Number
    optional: true
    constants: Modules.Facebook.ACTION_TYPE_*
    since: "5.0.0"

  - name: filters
    summary: The set of friends someone sees if a multi-friend selector is shown.
    type: Number
    constants: Modules.Facebook.FILTER_*
    since: "5.0.0"

  - name: objectID
    summary: The Open Graph object ID of the object being sent. Required if actionType is set.
    type: String
    optional: true
    since: "5.0.0"

---
name: ShareToMessengerParams
summary: |
    Parameters to pass to [shareMediaToMessenger()](Modules.Facebook.shareMediaToMessenger) method.
since: "5.4.0"
platforms: [iphone, ipad]
properties:
  - name: media
    summary: |
        Media to send with the messenger. Allowed media are images, GIF's and videos represented
        as Blobs.
    type: Titanium.Blob
    optional: false

  - name: metadata
    summary: |
        Pass additional information to be sent to Messenger which is sent back to the user's app when
        they reply to an attributed message.
    type: String
    optional: true

  - name: link
    summary: Optional property describing the www source URL of the content.
    description: |
        Setting this property improves performance by allowing Messenger to download the content directly
        rather than uploading the content from your app. This option is only used for animated GIFs.
    type: String
    optional: true

  - name: renderAsSticker
    summary: Optional property describing whether the content should be rendered like a sticker.
    description: |
        Setting this property informs Messenger that the media content should be rendered as a sticker.
        This option is only used for static images.
    type: Boolean
    default: false
    optional: true

---
name: CurrentAccessTokenParams
summary: Dictionary of parameter passed to [setAccessToken()](Modules.Facebook.setAccessToken).
platforms: [iphone, ipad]
since: "6.2.0"
properties:
  - name: accessToken
    summary: The opaque token string.
    type: String
  - name: permissions
    summary: The granted permissions.
    type: Array<String>
  - name: declinedPermissions
    summary: The declined permissions.
    type: Array<String>
  - name: appID
    summary: The app ID.
    type: String
  - name: userID
    summary: The user ID.
    type: String
  - name: exipirationDate
    summary: The optional expiration date (defaults to distant future).
    type: Date
  - name: refreshDate
    summary: The optional date the token was last refreshed (defaults to today).
    type: Date

---
name: FacebookDeferredAppLinkResponse
summary: Object returned from the [fetchDeferredAppLink()](Modules.Facebook.fetchDeferredAppLink) method
platforms: [android, iphone, ipad]
since: "5.4.0"
properties:
  - name: url
    summary: The URL returned from the server.
    type: String

  - name: success
    summary: Indicates if the response has succeded and the response contain a URL.
    type: Boolean

  - name: error
    summary: A string that contain the error.
    type: String
    optional: true
